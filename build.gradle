allprojects {
    apply plugin: 'java'

    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    group = 'com.wizzardo.tools'
    version = '0.24-SNAPSHOT'

    javadoc {
        options.tags = [ "author:" ]
    }

    repositories {
        mavenCentral()
    }

    test {
        testLogging {
            events "failed"
            exceptionFormat "full"
        }
        maxHeapSize = "1g"
    }
}

archivesBaseName = "tools"
ext {
    descriptionString = 'Package of useful tools like http-client, json-parser, xml-parser, cropping and resizing images and other'
}

apply from: 'gradle/sonatype.gradle'
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.5"
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled false
        csv.enabled false
    }
}

dependencies {
    compile project(':modules:tools-cache')
    compile project(':modules:tools-collections')
    compile project(':modules:tools-evaluation')
    compile project(':modules:tools-exception')
    compile project(':modules:tools-helpers')
    compile project(':modules:tools-http')
    compile project(':modules:tools-image')
    compile project(':modules:tools-interfaces')
    compile project(':modules:tools-io')
    compile project(':modules:tools-json')
    compile project(':modules:tools-math')
    compile project(':modules:tools-misc')
    compile project(':modules:tools-reflection')
    compile project(':modules:tools-security')
    compile project(':modules:tools-sql')
    compile project(':modules:tools-xml')
    compile project(':modules:tools-yaml')

    testCompile 'junit:junit:4.11'
    testCompile 'com.google.code.gson:gson:2.2.4'
}


task fatJar(type: Jar) {
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task copyJars(type: Copy, dependsOn: subprojects.jar) {
    from(subprojects.jar)
    into project.file('build/libs')
}
